# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tj2_interfaces/SwerveModule.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tj2_interfaces.msg

class SwerveModule(genpy.Message):
  _md5sum = "10a6d2a6c5d5aa6e9f89dc11619f1989"
  _type = "tj2_interfaces/SwerveModule"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string module_index
float64 azimuth_position
float64 azimuth_velocity
float64 wheel_velocity
float64 azimuth_position_ref
float64 azimuth_velocity_ref
float64 wheel_velocity_ref
tj2_interfaces/SwerveMotor motor_lo_0
tj2_interfaces/SwerveMotor motor_hi_1

================================================================================
MSG: tj2_interfaces/SwerveMotor
float64 velocity
float64 voltage
float64 voltage_ref
"""
  __slots__ = ['module_index','azimuth_position','azimuth_velocity','wheel_velocity','azimuth_position_ref','azimuth_velocity_ref','wheel_velocity_ref','motor_lo_0','motor_hi_1']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','tj2_interfaces/SwerveMotor','tj2_interfaces/SwerveMotor']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       module_index,azimuth_position,azimuth_velocity,wheel_velocity,azimuth_position_ref,azimuth_velocity_ref,wheel_velocity_ref,motor_lo_0,motor_hi_1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SwerveModule, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.module_index is None:
        self.module_index = ''
      if self.azimuth_position is None:
        self.azimuth_position = 0.
      if self.azimuth_velocity is None:
        self.azimuth_velocity = 0.
      if self.wheel_velocity is None:
        self.wheel_velocity = 0.
      if self.azimuth_position_ref is None:
        self.azimuth_position_ref = 0.
      if self.azimuth_velocity_ref is None:
        self.azimuth_velocity_ref = 0.
      if self.wheel_velocity_ref is None:
        self.wheel_velocity_ref = 0.
      if self.motor_lo_0 is None:
        self.motor_lo_0 = tj2_interfaces.msg.SwerveMotor()
      if self.motor_hi_1 is None:
        self.motor_hi_1 = tj2_interfaces.msg.SwerveMotor()
    else:
      self.module_index = ''
      self.azimuth_position = 0.
      self.azimuth_velocity = 0.
      self.wheel_velocity = 0.
      self.azimuth_position_ref = 0.
      self.azimuth_velocity_ref = 0.
      self.wheel_velocity_ref = 0.
      self.motor_lo_0 = tj2_interfaces.msg.SwerveMotor()
      self.motor_hi_1 = tj2_interfaces.msg.SwerveMotor()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.module_index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12d().pack(_x.azimuth_position, _x.azimuth_velocity, _x.wheel_velocity, _x.azimuth_position_ref, _x.azimuth_velocity_ref, _x.wheel_velocity_ref, _x.motor_lo_0.velocity, _x.motor_lo_0.voltage, _x.motor_lo_0.voltage_ref, _x.motor_hi_1.velocity, _x.motor_hi_1.voltage, _x.motor_hi_1.voltage_ref))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motor_lo_0 is None:
        self.motor_lo_0 = tj2_interfaces.msg.SwerveMotor()
      if self.motor_hi_1 is None:
        self.motor_hi_1 = tj2_interfaces.msg.SwerveMotor()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.module_index = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.module_index = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.azimuth_position, _x.azimuth_velocity, _x.wheel_velocity, _x.azimuth_position_ref, _x.azimuth_velocity_ref, _x.wheel_velocity_ref, _x.motor_lo_0.velocity, _x.motor_lo_0.voltage, _x.motor_lo_0.voltage_ref, _x.motor_hi_1.velocity, _x.motor_hi_1.voltage, _x.motor_hi_1.voltage_ref,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.module_index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12d().pack(_x.azimuth_position, _x.azimuth_velocity, _x.wheel_velocity, _x.azimuth_position_ref, _x.azimuth_velocity_ref, _x.wheel_velocity_ref, _x.motor_lo_0.velocity, _x.motor_lo_0.voltage, _x.motor_lo_0.voltage_ref, _x.motor_hi_1.velocity, _x.motor_hi_1.voltage, _x.motor_hi_1.voltage_ref))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motor_lo_0 is None:
        self.motor_lo_0 = tj2_interfaces.msg.SwerveMotor()
      if self.motor_hi_1 is None:
        self.motor_hi_1 = tj2_interfaces.msg.SwerveMotor()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.module_index = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.module_index = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.azimuth_position, _x.azimuth_velocity, _x.wheel_velocity, _x.azimuth_position_ref, _x.azimuth_velocity_ref, _x.wheel_velocity_ref, _x.motor_lo_0.velocity, _x.motor_lo_0.voltage, _x.motor_lo_0.voltage_ref, _x.motor_hi_1.velocity, _x.motor_hi_1.voltage, _x.motor_hi_1.voltage_ref,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
